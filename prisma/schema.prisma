// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  email         String             @unique
  verifications UserVerification[]
  firstName     String
  lastName      String?
  password      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  tokens        Token[]
}

enum UserVerificationEnum {
  Email @map("email")
  Phone @map("phone")
}

model UserVerification {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  type          UserVerificationEnum
  userId        String               @db.ObjectId
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  attempts      Int
  isVerified    Boolean?             @default(false)
  lastAttemptAt DateTime             @default(now())
  verifiedAt    DateTime?
  createAt      DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

enum TokenPurpose {
  VerifyEmail   @map("verify-email")
  Authorization @map("authorization")
  ResetPassword @map("reset-password")
}

model Token {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  token     String       @unique
  userId    String       @db.ObjectId
  purpose   TokenPurpose
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}
